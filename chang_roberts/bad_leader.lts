const True = 1
const False = 0
range Bool = 0..1
range IDS = 0..3

PNODE( UID=1 ) = ACTIVE[False],

ACTIVE[s:Bool] = (when( s==False ) send_id[UID] -> started -> ACTIVE[True]
				 |get_id[k:IDS] -> deciding -> DECIDE[k][s]
				 |when( s == True) get_leader[k:IDS] -> send_leader[k] -> WORKING[k]),

DECIDE[k:IDS][s:Bool] = (when( k<UID ) drop_it -> ACTIVE[s]
						|when( k>UID ) send_id[k] -> go_passive -> PASSIVE
						|when( k==UID ) i_am_leader -> ANNOUNCE),

PASSIVE = (get_id[k:IDS] -> send_id[k] ->PASSIVE
			|get_leader[k:IDS] -> send_leader[k] -> WORKING[k]),

ANNOUNCE = (send_leader[UID] -> WAITFORROUNDTRIP),

WAITFORROUNDTRIP = (get_leader[UID] -> all_informed -> WORKING[UID]),

WORKING[k:IDS] = (do_real_work[k] -> WORKING[k]).


assert Have_leader = <>(node[IDS].i_am_leader)

assert Only_one_leader = []!(node[0].i_am_leader && node[1].i_am_leader)

assert Everyone_works = forall[i:IDS] <>(node[i].do_real_work)

assert Always_start = forall[i:IDS] <>(node[i].started) //not true! Can go passive before starting

assert All_Working = forall[i:IDS] <>(node[i].do_real_work)


||RING = (node[i:IDS]:PNODE(i)) /
			{node[i:IDS].send_id/node[(i+1)%4].get_id,
			node[i:IDS].send_leader/node[(i+1)%4].get_leader}.


//Ok, bad actor for node 0.


BAD_PNODE( UID=1 ) = ACTIVE[UID][False],

ACTIVE[k:IDS][s:Bool] = (send_leader[k] -> WORKING[k]),
WORKING[k:IDS] = (do_real_work[k] -> WORKING[k]).
	

||BAD_RING = (node[0]:BAD_PNODE(0) || node[i:1..3]:PNODE(i)) /
			{node[i:IDS].send_id/node[(i+1)%4].get_id,
			node[i:IDS].send_leader/node[(i+1)%4].get_leader}.

assert DONT_GET_FOOLED = []!(node[3].send_leader[0]) //I got a path to this

/**

By manual choosing I got to this:

 node.1.send_id.1er

 node.1.started
 node.0.send_leader.0
 node.3.send_id.3
 node.3.started
 node.2.deciding
 node.2.drop_it
 node.2.send_id.2
 node.2.started
 node.1.send_leader.0
 node.3.deciding
 node.3.drop_it
 node.2.send_leader.0
 node.3.send_leader.0
 node.0.all_informed
 node.0.do_real_work.0
 node.1.do_real_work.0
 node.2.do_real_work.0
 node.3.do_real_work.0
**/
